// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_ss.proto

#ifndef PROTOBUF_INCLUDED_game_5fss_2eproto
#define PROTOBUF_INCLUDED_game_5fss_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_game_5fss_2eproto 

namespace protobuf_game_5fss_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_game_5fss_2eproto
namespace SSMsg {
class JsonMsg;
class JsonMsgDefaultTypeInternal;
extern JsonMsgDefaultTypeInternal _JsonMsg_default_instance_;
class S2SHeartBeat;
class S2SHeartBeatDefaultTypeInternal;
extern S2SHeartBeatDefaultTypeInternal _S2SHeartBeat_default_instance_;
class S2SNewServerAddGroupReq;
class S2SNewServerAddGroupReqDefaultTypeInternal;
extern S2SNewServerAddGroupReqDefaultTypeInternal _S2SNewServerAddGroupReq_default_instance_;
class S2SServerRegisterReq;
class S2SServerRegisterReqDefaultTypeInternal;
extern S2SServerRegisterReqDefaultTypeInternal _S2SServerRegisterReq_default_instance_;
class S2SServerReportReq;
class S2SServerReportReqDefaultTypeInternal;
extern S2SServerReportReqDefaultTypeInternal _S2SServerReportReq_default_instance_;
class SSPacket;
class SSPacketDefaultTypeInternal;
extern SSPacketDefaultTypeInternal _SSPacket_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerReportInfo;
class ServerReportInfoDefaultTypeInternal;
extern ServerReportInfoDefaultTypeInternal _ServerReportInfo_default_instance_;
}  // namespace SSMsg
namespace google {
namespace protobuf {
template<> ::SSMsg::JsonMsg* Arena::CreateMaybeMessage<::SSMsg::JsonMsg>(Arena*);
template<> ::SSMsg::S2SHeartBeat* Arena::CreateMaybeMessage<::SSMsg::S2SHeartBeat>(Arena*);
template<> ::SSMsg::S2SNewServerAddGroupReq* Arena::CreateMaybeMessage<::SSMsg::S2SNewServerAddGroupReq>(Arena*);
template<> ::SSMsg::S2SServerRegisterReq* Arena::CreateMaybeMessage<::SSMsg::S2SServerRegisterReq>(Arena*);
template<> ::SSMsg::S2SServerReportReq* Arena::CreateMaybeMessage<::SSMsg::S2SServerReportReq>(Arena*);
template<> ::SSMsg::SSPacket* Arena::CreateMaybeMessage<::SSMsg::SSPacket>(Arena*);
template<> ::SSMsg::ServerInfo* Arena::CreateMaybeMessage<::SSMsg::ServerInfo>(Arena*);
template<> ::SSMsg::ServerReportInfo* Arena::CreateMaybeMessage<::SSMsg::ServerReportInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace SSMsg {

enum SS_MSG_ID {
  S2S_NONE = 0,
  S2S_SERVER_REGSTER_REQ = 2001,
  S2S_SERVER_REPORT_REQ = 2002,
  S2S_HEARTBEAT = 2003,
  S2S_NEW_SERVER_ADD_GROUP_REQ = 2004,
  SS_MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SS_MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SS_MSG_ID_IsValid(int value);
const SS_MSG_ID SS_MSG_ID_MIN = S2S_NONE;
const SS_MSG_ID SS_MSG_ID_MAX = S2S_NEW_SERVER_ADD_GROUP_REQ;
const int SS_MSG_ID_ARRAYSIZE = SS_MSG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SS_MSG_ID_descriptor();
inline const ::std::string& SS_MSG_ID_Name(SS_MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SS_MSG_ID_descriptor(), value);
}
inline bool SS_MSG_ID_Parse(
    const ::std::string& name, SS_MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SS_MSG_ID>(
    SS_MSG_ID_descriptor(), name, value);
}
// ===================================================================

class JsonMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSMsg.JsonMsg) */ {
 public:
  JsonMsg();
  virtual ~JsonMsg();

  JsonMsg(const JsonMsg& from);

  inline JsonMsg& operator=(const JsonMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JsonMsg(JsonMsg&& from) noexcept
    : JsonMsg() {
    *this = ::std::move(from);
  }

  inline JsonMsg& operator=(JsonMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JsonMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JsonMsg* internal_default_instance() {
    return reinterpret_cast<const JsonMsg*>(
               &_JsonMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(JsonMsg* other);
  friend void swap(JsonMsg& a, JsonMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JsonMsg* New() const final {
    return CreateMaybeMessage<JsonMsg>(NULL);
  }

  JsonMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JsonMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JsonMsg& from);
  void MergeFrom(const JsonMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string test_key1 = 1;
  void clear_test_key1();
  static const int kTestKey1FieldNumber = 1;
  const ::std::string& test_key1() const;
  void set_test_key1(const ::std::string& value);
  #if LANG_CXX11
  void set_test_key1(::std::string&& value);
  #endif
  void set_test_key1(const char* value);
  void set_test_key1(const char* value, size_t size);
  ::std::string* mutable_test_key1();
  ::std::string* release_test_key1();
  void set_allocated_test_key1(::std::string* test_key1);

  // string test_key2 = 2;
  void clear_test_key2();
  static const int kTestKey2FieldNumber = 2;
  const ::std::string& test_key2() const;
  void set_test_key2(const ::std::string& value);
  #if LANG_CXX11
  void set_test_key2(::std::string&& value);
  #endif
  void set_test_key2(const char* value);
  void set_test_key2(const char* value, size_t size);
  ::std::string* mutable_test_key2();
  ::std::string* release_test_key2();
  void set_allocated_test_key2(::std::string* test_key2);

  // @@protoc_insertion_point(class_scope:SSMsg.JsonMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr test_key1_;
  ::google::protobuf::internal::ArenaStringPtr test_key2_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_5fss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SSPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSMsg.SSPacket) */ {
 public:
  SSPacket();
  virtual ~SSPacket();

  SSPacket(const SSPacket& from);

  inline SSPacket& operator=(const SSPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SSPacket(SSPacket&& from) noexcept
    : SSPacket() {
    *this = ::std::move(from);
  }

  inline SSPacket& operator=(SSPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSPacket* internal_default_instance() {
    return reinterpret_cast<const SSPacket*>(
               &_SSPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SSPacket* other);
  friend void swap(SSPacket& a, SSPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSPacket* New() const final {
    return CreateMaybeMessage<SSPacket>(NULL);
  }

  SSPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SSPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SSPacket& from);
  void MergeFrom(const SSPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .SSMsg.S2SServerRegisterReq server_regist_req = 2;
  bool has_server_regist_req() const;
  void clear_server_regist_req();
  static const int kServerRegistReqFieldNumber = 2;
  private:
  const ::SSMsg::S2SServerRegisterReq& _internal_server_regist_req() const;
  public:
  const ::SSMsg::S2SServerRegisterReq& server_regist_req() const;
  ::SSMsg::S2SServerRegisterReq* release_server_regist_req();
  ::SSMsg::S2SServerRegisterReq* mutable_server_regist_req();
  void set_allocated_server_regist_req(::SSMsg::S2SServerRegisterReq* server_regist_req);

  // .SSMsg.S2SServerReportReq server_report_req = 3;
  bool has_server_report_req() const;
  void clear_server_report_req();
  static const int kServerReportReqFieldNumber = 3;
  private:
  const ::SSMsg::S2SServerReportReq& _internal_server_report_req() const;
  public:
  const ::SSMsg::S2SServerReportReq& server_report_req() const;
  ::SSMsg::S2SServerReportReq* release_server_report_req();
  ::SSMsg::S2SServerReportReq* mutable_server_report_req();
  void set_allocated_server_report_req(::SSMsg::S2SServerReportReq* server_report_req);

  // .SSMsg.S2SHeartBeat heart_beat = 4;
  bool has_heart_beat() const;
  void clear_heart_beat();
  static const int kHeartBeatFieldNumber = 4;
  private:
  const ::SSMsg::S2SHeartBeat& _internal_heart_beat() const;
  public:
  const ::SSMsg::S2SHeartBeat& heart_beat() const;
  ::SSMsg::S2SHeartBeat* release_heart_beat();
  ::SSMsg::S2SHeartBeat* mutable_heart_beat();
  void set_allocated_heart_beat(::SSMsg::S2SHeartBeat* heart_beat);

  // .SSMsg.S2SNewServerAddGroupReq new_server_add_group_req = 5;
  bool has_new_server_add_group_req() const;
  void clear_new_server_add_group_req();
  static const int kNewServerAddGroupReqFieldNumber = 5;
  private:
  const ::SSMsg::S2SNewServerAddGroupReq& _internal_new_server_add_group_req() const;
  public:
  const ::SSMsg::S2SNewServerAddGroupReq& new_server_add_group_req() const;
  ::SSMsg::S2SNewServerAddGroupReq* release_new_server_add_group_req();
  ::SSMsg::S2SNewServerAddGroupReq* mutable_new_server_add_group_req();
  void set_allocated_new_server_add_group_req(::SSMsg::S2SNewServerAddGroupReq* new_server_add_group_req);

  // int32 cmd_id = 1;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::int32 cmd_id() const;
  void set_cmd_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SSMsg.SSPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::SSMsg::S2SServerRegisterReq* server_regist_req_;
  ::SSMsg::S2SServerReportReq* server_report_req_;
  ::SSMsg::S2SHeartBeat* heart_beat_;
  ::SSMsg::S2SNewServerAddGroupReq* new_server_add_group_req_;
  ::google::protobuf::int32 cmd_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_5fss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSMsg.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(NULL);
  }

  ServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string int_ip = 5;
  void clear_int_ip();
  static const int kIntIpFieldNumber = 5;
  const ::std::string& int_ip() const;
  void set_int_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_int_ip(::std::string&& value);
  #endif
  void set_int_ip(const char* value);
  void set_int_ip(const char* value, size_t size);
  ::std::string* mutable_int_ip();
  ::std::string* release_int_ip();
  void set_allocated_int_ip(::std::string* int_ip);

  // string ext_ip = 6;
  void clear_ext_ip();
  static const int kExtIpFieldNumber = 6;
  const ::std::string& ext_ip() const;
  void set_ext_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ext_ip(::std::string&& value);
  #endif
  void set_ext_ip(const char* value);
  void set_ext_ip(const char* value, size_t size);
  ::std::string* mutable_ext_ip();
  ::std::string* release_ext_ip();
  void set_allocated_ext_ip(::std::string* ext_ip);

  // int32 server_type = 1;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  ::google::protobuf::int32 server_type() const;
  void set_server_type(::google::protobuf::int32 value);

  // int32 server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // int32 int_port = 3;
  void clear_int_port();
  static const int kIntPortFieldNumber = 3;
  ::google::protobuf::int32 int_port() const;
  void set_int_port(::google::protobuf::int32 value);

  // int32 ext_port = 4;
  void clear_ext_port();
  static const int kExtPortFieldNumber = 4;
  ::google::protobuf::int32 ext_port() const;
  void set_ext_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SSMsg.ServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr int_ip_;
  ::google::protobuf::internal::ArenaStringPtr ext_ip_;
  ::google::protobuf::int32 server_type_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 int_port_;
  ::google::protobuf::int32 ext_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_5fss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerReportInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSMsg.ServerReportInfo) */ {
 public:
  ServerReportInfo();
  virtual ~ServerReportInfo();

  ServerReportInfo(const ServerReportInfo& from);

  inline ServerReportInfo& operator=(const ServerReportInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerReportInfo(ServerReportInfo&& from) noexcept
    : ServerReportInfo() {
    *this = ::std::move(from);
  }

  inline ServerReportInfo& operator=(ServerReportInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerReportInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerReportInfo* internal_default_instance() {
    return reinterpret_cast<const ServerReportInfo*>(
               &_ServerReportInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ServerReportInfo* other);
  friend void swap(ServerReportInfo& a, ServerReportInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerReportInfo* New() const final {
    return CreateMaybeMessage<ServerReportInfo>(NULL);
  }

  ServerReportInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerReportInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerReportInfo& from);
  void MergeFrom(const ServerReportInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReportInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .SSMsg.ServerInfo server_info = 1;
  bool has_server_info() const;
  void clear_server_info();
  static const int kServerInfoFieldNumber = 1;
  private:
  const ::SSMsg::ServerInfo& _internal_server_info() const;
  public:
  const ::SSMsg::ServerInfo& server_info() const;
  ::SSMsg::ServerInfo* release_server_info();
  ::SSMsg::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::SSMsg::ServerInfo* server_info);

  // int32 state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SSMsg.ServerReportInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::SSMsg::ServerInfo* server_info_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_5fss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SServerRegisterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSMsg.S2SServerRegisterReq) */ {
 public:
  S2SServerRegisterReq();
  virtual ~S2SServerRegisterReq();

  S2SServerRegisterReq(const S2SServerRegisterReq& from);

  inline S2SServerRegisterReq& operator=(const S2SServerRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SServerRegisterReq(S2SServerRegisterReq&& from) noexcept
    : S2SServerRegisterReq() {
    *this = ::std::move(from);
  }

  inline S2SServerRegisterReq& operator=(S2SServerRegisterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SServerRegisterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SServerRegisterReq* internal_default_instance() {
    return reinterpret_cast<const S2SServerRegisterReq*>(
               &_S2SServerRegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(S2SServerRegisterReq* other);
  friend void swap(S2SServerRegisterReq& a, S2SServerRegisterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SServerRegisterReq* New() const final {
    return CreateMaybeMessage<S2SServerRegisterReq>(NULL);
  }

  S2SServerRegisterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SServerRegisterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SServerRegisterReq& from);
  void MergeFrom(const S2SServerRegisterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SServerRegisterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .SSMsg.ServerInfo server_info = 1;
  bool has_server_info() const;
  void clear_server_info();
  static const int kServerInfoFieldNumber = 1;
  private:
  const ::SSMsg::ServerInfo& _internal_server_info() const;
  public:
  const ::SSMsg::ServerInfo& server_info() const;
  ::SSMsg::ServerInfo* release_server_info();
  ::SSMsg::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::SSMsg::ServerInfo* server_info);

  // @@protoc_insertion_point(class_scope:SSMsg.S2SServerRegisterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::SSMsg::ServerInfo* server_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_5fss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SServerReportReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSMsg.S2SServerReportReq) */ {
 public:
  S2SServerReportReq();
  virtual ~S2SServerReportReq();

  S2SServerReportReq(const S2SServerReportReq& from);

  inline S2SServerReportReq& operator=(const S2SServerReportReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SServerReportReq(S2SServerReportReq&& from) noexcept
    : S2SServerReportReq() {
    *this = ::std::move(from);
  }

  inline S2SServerReportReq& operator=(S2SServerReportReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SServerReportReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SServerReportReq* internal_default_instance() {
    return reinterpret_cast<const S2SServerReportReq*>(
               &_S2SServerReportReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(S2SServerReportReq* other);
  friend void swap(S2SServerReportReq& a, S2SServerReportReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SServerReportReq* New() const final {
    return CreateMaybeMessage<S2SServerReportReq>(NULL);
  }

  S2SServerReportReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SServerReportReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SServerReportReq& from);
  void MergeFrom(const S2SServerReportReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SServerReportReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .SSMsg.ServerReportInfo server_report_info = 1;
  bool has_server_report_info() const;
  void clear_server_report_info();
  static const int kServerReportInfoFieldNumber = 1;
  private:
  const ::SSMsg::ServerReportInfo& _internal_server_report_info() const;
  public:
  const ::SSMsg::ServerReportInfo& server_report_info() const;
  ::SSMsg::ServerReportInfo* release_server_report_info();
  ::SSMsg::ServerReportInfo* mutable_server_report_info();
  void set_allocated_server_report_info(::SSMsg::ServerReportInfo* server_report_info);

  // @@protoc_insertion_point(class_scope:SSMsg.S2SServerReportReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::SSMsg::ServerReportInfo* server_report_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_5fss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SHeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSMsg.S2SHeartBeat) */ {
 public:
  S2SHeartBeat();
  virtual ~S2SHeartBeat();

  S2SHeartBeat(const S2SHeartBeat& from);

  inline S2SHeartBeat& operator=(const S2SHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SHeartBeat(S2SHeartBeat&& from) noexcept
    : S2SHeartBeat() {
    *this = ::std::move(from);
  }

  inline S2SHeartBeat& operator=(S2SHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SHeartBeat* internal_default_instance() {
    return reinterpret_cast<const S2SHeartBeat*>(
               &_S2SHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(S2SHeartBeat* other);
  friend void swap(S2SHeartBeat& a, S2SHeartBeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SHeartBeat* New() const final {
    return CreateMaybeMessage<S2SHeartBeat>(NULL);
  }

  S2SHeartBeat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SHeartBeat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SHeartBeat& from);
  void MergeFrom(const S2SHeartBeat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SHeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 server_type = 1;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  ::google::protobuf::int32 server_type() const;
  void set_server_type(::google::protobuf::int32 value);

  // int32 server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SSMsg.S2SHeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 server_type_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_5fss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2SNewServerAddGroupReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSMsg.S2SNewServerAddGroupReq) */ {
 public:
  S2SNewServerAddGroupReq();
  virtual ~S2SNewServerAddGroupReq();

  S2SNewServerAddGroupReq(const S2SNewServerAddGroupReq& from);

  inline S2SNewServerAddGroupReq& operator=(const S2SNewServerAddGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SNewServerAddGroupReq(S2SNewServerAddGroupReq&& from) noexcept
    : S2SNewServerAddGroupReq() {
    *this = ::std::move(from);
  }

  inline S2SNewServerAddGroupReq& operator=(S2SNewServerAddGroupReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SNewServerAddGroupReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SNewServerAddGroupReq* internal_default_instance() {
    return reinterpret_cast<const S2SNewServerAddGroupReq*>(
               &_S2SNewServerAddGroupReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(S2SNewServerAddGroupReq* other);
  friend void swap(S2SNewServerAddGroupReq& a, S2SNewServerAddGroupReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SNewServerAddGroupReq* New() const final {
    return CreateMaybeMessage<S2SNewServerAddGroupReq>(NULL);
  }

  S2SNewServerAddGroupReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SNewServerAddGroupReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SNewServerAddGroupReq& from);
  void MergeFrom(const S2SNewServerAddGroupReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SNewServerAddGroupReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SSMsg.ServerInfo server_info = 1;
  int server_info_size() const;
  void clear_server_info();
  static const int kServerInfoFieldNumber = 1;
  ::SSMsg::ServerInfo* mutable_server_info(int index);
  ::google::protobuf::RepeatedPtrField< ::SSMsg::ServerInfo >*
      mutable_server_info();
  const ::SSMsg::ServerInfo& server_info(int index) const;
  ::SSMsg::ServerInfo* add_server_info();
  const ::google::protobuf::RepeatedPtrField< ::SSMsg::ServerInfo >&
      server_info() const;

  // @@protoc_insertion_point(class_scope:SSMsg.S2SNewServerAddGroupReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SSMsg::ServerInfo > server_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_5fss_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JsonMsg

// string test_key1 = 1;
inline void JsonMsg::clear_test_key1() {
  test_key1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JsonMsg::test_key1() const {
  // @@protoc_insertion_point(field_get:SSMsg.JsonMsg.test_key1)
  return test_key1_.GetNoArena();
}
inline void JsonMsg::set_test_key1(const ::std::string& value) {
  
  test_key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSMsg.JsonMsg.test_key1)
}
#if LANG_CXX11
inline void JsonMsg::set_test_key1(::std::string&& value) {
  
  test_key1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSMsg.JsonMsg.test_key1)
}
#endif
inline void JsonMsg::set_test_key1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSMsg.JsonMsg.test_key1)
}
inline void JsonMsg::set_test_key1(const char* value, size_t size) {
  
  test_key1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSMsg.JsonMsg.test_key1)
}
inline ::std::string* JsonMsg::mutable_test_key1() {
  
  // @@protoc_insertion_point(field_mutable:SSMsg.JsonMsg.test_key1)
  return test_key1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JsonMsg::release_test_key1() {
  // @@protoc_insertion_point(field_release:SSMsg.JsonMsg.test_key1)
  
  return test_key1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JsonMsg::set_allocated_test_key1(::std::string* test_key1) {
  if (test_key1 != NULL) {
    
  } else {
    
  }
  test_key1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_key1);
  // @@protoc_insertion_point(field_set_allocated:SSMsg.JsonMsg.test_key1)
}

// string test_key2 = 2;
inline void JsonMsg::clear_test_key2() {
  test_key2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JsonMsg::test_key2() const {
  // @@protoc_insertion_point(field_get:SSMsg.JsonMsg.test_key2)
  return test_key2_.GetNoArena();
}
inline void JsonMsg::set_test_key2(const ::std::string& value) {
  
  test_key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSMsg.JsonMsg.test_key2)
}
#if LANG_CXX11
inline void JsonMsg::set_test_key2(::std::string&& value) {
  
  test_key2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSMsg.JsonMsg.test_key2)
}
#endif
inline void JsonMsg::set_test_key2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSMsg.JsonMsg.test_key2)
}
inline void JsonMsg::set_test_key2(const char* value, size_t size) {
  
  test_key2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSMsg.JsonMsg.test_key2)
}
inline ::std::string* JsonMsg::mutable_test_key2() {
  
  // @@protoc_insertion_point(field_mutable:SSMsg.JsonMsg.test_key2)
  return test_key2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JsonMsg::release_test_key2() {
  // @@protoc_insertion_point(field_release:SSMsg.JsonMsg.test_key2)
  
  return test_key2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JsonMsg::set_allocated_test_key2(::std::string* test_key2) {
  if (test_key2 != NULL) {
    
  } else {
    
  }
  test_key2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_key2);
  // @@protoc_insertion_point(field_set_allocated:SSMsg.JsonMsg.test_key2)
}

// -------------------------------------------------------------------

// SSPacket

// int32 cmd_id = 1;
inline void SSPacket::clear_cmd_id() {
  cmd_id_ = 0;
}
inline ::google::protobuf::int32 SSPacket::cmd_id() const {
  // @@protoc_insertion_point(field_get:SSMsg.SSPacket.cmd_id)
  return cmd_id_;
}
inline void SSPacket::set_cmd_id(::google::protobuf::int32 value) {
  
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.SSPacket.cmd_id)
}

// .SSMsg.S2SServerRegisterReq server_regist_req = 2;
inline bool SSPacket::has_server_regist_req() const {
  return this != internal_default_instance() && server_regist_req_ != NULL;
}
inline void SSPacket::clear_server_regist_req() {
  if (GetArenaNoVirtual() == NULL && server_regist_req_ != NULL) {
    delete server_regist_req_;
  }
  server_regist_req_ = NULL;
}
inline const ::SSMsg::S2SServerRegisterReq& SSPacket::_internal_server_regist_req() const {
  return *server_regist_req_;
}
inline const ::SSMsg::S2SServerRegisterReq& SSPacket::server_regist_req() const {
  const ::SSMsg::S2SServerRegisterReq* p = server_regist_req_;
  // @@protoc_insertion_point(field_get:SSMsg.SSPacket.server_regist_req)
  return p != NULL ? *p : *reinterpret_cast<const ::SSMsg::S2SServerRegisterReq*>(
      &::SSMsg::_S2SServerRegisterReq_default_instance_);
}
inline ::SSMsg::S2SServerRegisterReq* SSPacket::release_server_regist_req() {
  // @@protoc_insertion_point(field_release:SSMsg.SSPacket.server_regist_req)
  
  ::SSMsg::S2SServerRegisterReq* temp = server_regist_req_;
  server_regist_req_ = NULL;
  return temp;
}
inline ::SSMsg::S2SServerRegisterReq* SSPacket::mutable_server_regist_req() {
  
  if (server_regist_req_ == NULL) {
    auto* p = CreateMaybeMessage<::SSMsg::S2SServerRegisterReq>(GetArenaNoVirtual());
    server_regist_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSMsg.SSPacket.server_regist_req)
  return server_regist_req_;
}
inline void SSPacket::set_allocated_server_regist_req(::SSMsg::S2SServerRegisterReq* server_regist_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_regist_req_;
  }
  if (server_regist_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_regist_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_regist_req, submessage_arena);
    }
    
  } else {
    
  }
  server_regist_req_ = server_regist_req;
  // @@protoc_insertion_point(field_set_allocated:SSMsg.SSPacket.server_regist_req)
}

// .SSMsg.S2SServerReportReq server_report_req = 3;
inline bool SSPacket::has_server_report_req() const {
  return this != internal_default_instance() && server_report_req_ != NULL;
}
inline void SSPacket::clear_server_report_req() {
  if (GetArenaNoVirtual() == NULL && server_report_req_ != NULL) {
    delete server_report_req_;
  }
  server_report_req_ = NULL;
}
inline const ::SSMsg::S2SServerReportReq& SSPacket::_internal_server_report_req() const {
  return *server_report_req_;
}
inline const ::SSMsg::S2SServerReportReq& SSPacket::server_report_req() const {
  const ::SSMsg::S2SServerReportReq* p = server_report_req_;
  // @@protoc_insertion_point(field_get:SSMsg.SSPacket.server_report_req)
  return p != NULL ? *p : *reinterpret_cast<const ::SSMsg::S2SServerReportReq*>(
      &::SSMsg::_S2SServerReportReq_default_instance_);
}
inline ::SSMsg::S2SServerReportReq* SSPacket::release_server_report_req() {
  // @@protoc_insertion_point(field_release:SSMsg.SSPacket.server_report_req)
  
  ::SSMsg::S2SServerReportReq* temp = server_report_req_;
  server_report_req_ = NULL;
  return temp;
}
inline ::SSMsg::S2SServerReportReq* SSPacket::mutable_server_report_req() {
  
  if (server_report_req_ == NULL) {
    auto* p = CreateMaybeMessage<::SSMsg::S2SServerReportReq>(GetArenaNoVirtual());
    server_report_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSMsg.SSPacket.server_report_req)
  return server_report_req_;
}
inline void SSPacket::set_allocated_server_report_req(::SSMsg::S2SServerReportReq* server_report_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_report_req_;
  }
  if (server_report_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_report_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_report_req, submessage_arena);
    }
    
  } else {
    
  }
  server_report_req_ = server_report_req;
  // @@protoc_insertion_point(field_set_allocated:SSMsg.SSPacket.server_report_req)
}

// .SSMsg.S2SHeartBeat heart_beat = 4;
inline bool SSPacket::has_heart_beat() const {
  return this != internal_default_instance() && heart_beat_ != NULL;
}
inline void SSPacket::clear_heart_beat() {
  if (GetArenaNoVirtual() == NULL && heart_beat_ != NULL) {
    delete heart_beat_;
  }
  heart_beat_ = NULL;
}
inline const ::SSMsg::S2SHeartBeat& SSPacket::_internal_heart_beat() const {
  return *heart_beat_;
}
inline const ::SSMsg::S2SHeartBeat& SSPacket::heart_beat() const {
  const ::SSMsg::S2SHeartBeat* p = heart_beat_;
  // @@protoc_insertion_point(field_get:SSMsg.SSPacket.heart_beat)
  return p != NULL ? *p : *reinterpret_cast<const ::SSMsg::S2SHeartBeat*>(
      &::SSMsg::_S2SHeartBeat_default_instance_);
}
inline ::SSMsg::S2SHeartBeat* SSPacket::release_heart_beat() {
  // @@protoc_insertion_point(field_release:SSMsg.SSPacket.heart_beat)
  
  ::SSMsg::S2SHeartBeat* temp = heart_beat_;
  heart_beat_ = NULL;
  return temp;
}
inline ::SSMsg::S2SHeartBeat* SSPacket::mutable_heart_beat() {
  
  if (heart_beat_ == NULL) {
    auto* p = CreateMaybeMessage<::SSMsg::S2SHeartBeat>(GetArenaNoVirtual());
    heart_beat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSMsg.SSPacket.heart_beat)
  return heart_beat_;
}
inline void SSPacket::set_allocated_heart_beat(::SSMsg::S2SHeartBeat* heart_beat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete heart_beat_;
  }
  if (heart_beat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heart_beat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heart_beat, submessage_arena);
    }
    
  } else {
    
  }
  heart_beat_ = heart_beat;
  // @@protoc_insertion_point(field_set_allocated:SSMsg.SSPacket.heart_beat)
}

// .SSMsg.S2SNewServerAddGroupReq new_server_add_group_req = 5;
inline bool SSPacket::has_new_server_add_group_req() const {
  return this != internal_default_instance() && new_server_add_group_req_ != NULL;
}
inline void SSPacket::clear_new_server_add_group_req() {
  if (GetArenaNoVirtual() == NULL && new_server_add_group_req_ != NULL) {
    delete new_server_add_group_req_;
  }
  new_server_add_group_req_ = NULL;
}
inline const ::SSMsg::S2SNewServerAddGroupReq& SSPacket::_internal_new_server_add_group_req() const {
  return *new_server_add_group_req_;
}
inline const ::SSMsg::S2SNewServerAddGroupReq& SSPacket::new_server_add_group_req() const {
  const ::SSMsg::S2SNewServerAddGroupReq* p = new_server_add_group_req_;
  // @@protoc_insertion_point(field_get:SSMsg.SSPacket.new_server_add_group_req)
  return p != NULL ? *p : *reinterpret_cast<const ::SSMsg::S2SNewServerAddGroupReq*>(
      &::SSMsg::_S2SNewServerAddGroupReq_default_instance_);
}
inline ::SSMsg::S2SNewServerAddGroupReq* SSPacket::release_new_server_add_group_req() {
  // @@protoc_insertion_point(field_release:SSMsg.SSPacket.new_server_add_group_req)
  
  ::SSMsg::S2SNewServerAddGroupReq* temp = new_server_add_group_req_;
  new_server_add_group_req_ = NULL;
  return temp;
}
inline ::SSMsg::S2SNewServerAddGroupReq* SSPacket::mutable_new_server_add_group_req() {
  
  if (new_server_add_group_req_ == NULL) {
    auto* p = CreateMaybeMessage<::SSMsg::S2SNewServerAddGroupReq>(GetArenaNoVirtual());
    new_server_add_group_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSMsg.SSPacket.new_server_add_group_req)
  return new_server_add_group_req_;
}
inline void SSPacket::set_allocated_new_server_add_group_req(::SSMsg::S2SNewServerAddGroupReq* new_server_add_group_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_server_add_group_req_;
  }
  if (new_server_add_group_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_server_add_group_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_server_add_group_req, submessage_arena);
    }
    
  } else {
    
  }
  new_server_add_group_req_ = new_server_add_group_req;
  // @@protoc_insertion_point(field_set_allocated:SSMsg.SSPacket.new_server_add_group_req)
}

// -------------------------------------------------------------------

// ServerInfo

// int32 server_type = 1;
inline void ServerInfo::clear_server_type() {
  server_type_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::server_type() const {
  // @@protoc_insertion_point(field_get:SSMsg.ServerInfo.server_type)
  return server_type_;
}
inline void ServerInfo::set_server_type(::google::protobuf::int32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.ServerInfo.server_type)
}

// int32 server_id = 2;
inline void ServerInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:SSMsg.ServerInfo.server_id)
  return server_id_;
}
inline void ServerInfo::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.ServerInfo.server_id)
}

// int32 int_port = 3;
inline void ServerInfo::clear_int_port() {
  int_port_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::int_port() const {
  // @@protoc_insertion_point(field_get:SSMsg.ServerInfo.int_port)
  return int_port_;
}
inline void ServerInfo::set_int_port(::google::protobuf::int32 value) {
  
  int_port_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.ServerInfo.int_port)
}

// int32 ext_port = 4;
inline void ServerInfo::clear_ext_port() {
  ext_port_ = 0;
}
inline ::google::protobuf::int32 ServerInfo::ext_port() const {
  // @@protoc_insertion_point(field_get:SSMsg.ServerInfo.ext_port)
  return ext_port_;
}
inline void ServerInfo::set_ext_port(::google::protobuf::int32 value) {
  
  ext_port_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.ServerInfo.ext_port)
}

// string int_ip = 5;
inline void ServerInfo::clear_int_ip() {
  int_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::int_ip() const {
  // @@protoc_insertion_point(field_get:SSMsg.ServerInfo.int_ip)
  return int_ip_.GetNoArena();
}
inline void ServerInfo::set_int_ip(const ::std::string& value) {
  
  int_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSMsg.ServerInfo.int_ip)
}
#if LANG_CXX11
inline void ServerInfo::set_int_ip(::std::string&& value) {
  
  int_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSMsg.ServerInfo.int_ip)
}
#endif
inline void ServerInfo::set_int_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  int_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSMsg.ServerInfo.int_ip)
}
inline void ServerInfo::set_int_ip(const char* value, size_t size) {
  
  int_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSMsg.ServerInfo.int_ip)
}
inline ::std::string* ServerInfo::mutable_int_ip() {
  
  // @@protoc_insertion_point(field_mutable:SSMsg.ServerInfo.int_ip)
  return int_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_int_ip() {
  // @@protoc_insertion_point(field_release:SSMsg.ServerInfo.int_ip)
  
  return int_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_int_ip(::std::string* int_ip) {
  if (int_ip != NULL) {
    
  } else {
    
  }
  int_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), int_ip);
  // @@protoc_insertion_point(field_set_allocated:SSMsg.ServerInfo.int_ip)
}

// string ext_ip = 6;
inline void ServerInfo::clear_ext_ip() {
  ext_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::ext_ip() const {
  // @@protoc_insertion_point(field_get:SSMsg.ServerInfo.ext_ip)
  return ext_ip_.GetNoArena();
}
inline void ServerInfo::set_ext_ip(const ::std::string& value) {
  
  ext_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSMsg.ServerInfo.ext_ip)
}
#if LANG_CXX11
inline void ServerInfo::set_ext_ip(::std::string&& value) {
  
  ext_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSMsg.ServerInfo.ext_ip)
}
#endif
inline void ServerInfo::set_ext_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ext_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSMsg.ServerInfo.ext_ip)
}
inline void ServerInfo::set_ext_ip(const char* value, size_t size) {
  
  ext_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSMsg.ServerInfo.ext_ip)
}
inline ::std::string* ServerInfo::mutable_ext_ip() {
  
  // @@protoc_insertion_point(field_mutable:SSMsg.ServerInfo.ext_ip)
  return ext_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_ext_ip() {
  // @@protoc_insertion_point(field_release:SSMsg.ServerInfo.ext_ip)
  
  return ext_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_ext_ip(::std::string* ext_ip) {
  if (ext_ip != NULL) {
    
  } else {
    
  }
  ext_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext_ip);
  // @@protoc_insertion_point(field_set_allocated:SSMsg.ServerInfo.ext_ip)
}

// -------------------------------------------------------------------

// ServerReportInfo

// .SSMsg.ServerInfo server_info = 1;
inline bool ServerReportInfo::has_server_info() const {
  return this != internal_default_instance() && server_info_ != NULL;
}
inline void ServerReportInfo::clear_server_info() {
  if (GetArenaNoVirtual() == NULL && server_info_ != NULL) {
    delete server_info_;
  }
  server_info_ = NULL;
}
inline const ::SSMsg::ServerInfo& ServerReportInfo::_internal_server_info() const {
  return *server_info_;
}
inline const ::SSMsg::ServerInfo& ServerReportInfo::server_info() const {
  const ::SSMsg::ServerInfo* p = server_info_;
  // @@protoc_insertion_point(field_get:SSMsg.ServerReportInfo.server_info)
  return p != NULL ? *p : *reinterpret_cast<const ::SSMsg::ServerInfo*>(
      &::SSMsg::_ServerInfo_default_instance_);
}
inline ::SSMsg::ServerInfo* ServerReportInfo::release_server_info() {
  // @@protoc_insertion_point(field_release:SSMsg.ServerReportInfo.server_info)
  
  ::SSMsg::ServerInfo* temp = server_info_;
  server_info_ = NULL;
  return temp;
}
inline ::SSMsg::ServerInfo* ServerReportInfo::mutable_server_info() {
  
  if (server_info_ == NULL) {
    auto* p = CreateMaybeMessage<::SSMsg::ServerInfo>(GetArenaNoVirtual());
    server_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSMsg.ServerReportInfo.server_info)
  return server_info_;
}
inline void ServerReportInfo::set_allocated_server_info(::SSMsg::ServerInfo* server_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_info_;
  }
  if (server_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    
  } else {
    
  }
  server_info_ = server_info;
  // @@protoc_insertion_point(field_set_allocated:SSMsg.ServerReportInfo.server_info)
}

// int32 state = 2;
inline void ServerReportInfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 ServerReportInfo::state() const {
  // @@protoc_insertion_point(field_get:SSMsg.ServerReportInfo.state)
  return state_;
}
inline void ServerReportInfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.ServerReportInfo.state)
}

// -------------------------------------------------------------------

// S2SServerRegisterReq

// .SSMsg.ServerInfo server_info = 1;
inline bool S2SServerRegisterReq::has_server_info() const {
  return this != internal_default_instance() && server_info_ != NULL;
}
inline void S2SServerRegisterReq::clear_server_info() {
  if (GetArenaNoVirtual() == NULL && server_info_ != NULL) {
    delete server_info_;
  }
  server_info_ = NULL;
}
inline const ::SSMsg::ServerInfo& S2SServerRegisterReq::_internal_server_info() const {
  return *server_info_;
}
inline const ::SSMsg::ServerInfo& S2SServerRegisterReq::server_info() const {
  const ::SSMsg::ServerInfo* p = server_info_;
  // @@protoc_insertion_point(field_get:SSMsg.S2SServerRegisterReq.server_info)
  return p != NULL ? *p : *reinterpret_cast<const ::SSMsg::ServerInfo*>(
      &::SSMsg::_ServerInfo_default_instance_);
}
inline ::SSMsg::ServerInfo* S2SServerRegisterReq::release_server_info() {
  // @@protoc_insertion_point(field_release:SSMsg.S2SServerRegisterReq.server_info)
  
  ::SSMsg::ServerInfo* temp = server_info_;
  server_info_ = NULL;
  return temp;
}
inline ::SSMsg::ServerInfo* S2SServerRegisterReq::mutable_server_info() {
  
  if (server_info_ == NULL) {
    auto* p = CreateMaybeMessage<::SSMsg::ServerInfo>(GetArenaNoVirtual());
    server_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSMsg.S2SServerRegisterReq.server_info)
  return server_info_;
}
inline void S2SServerRegisterReq::set_allocated_server_info(::SSMsg::ServerInfo* server_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_info_;
  }
  if (server_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    
  } else {
    
  }
  server_info_ = server_info;
  // @@protoc_insertion_point(field_set_allocated:SSMsg.S2SServerRegisterReq.server_info)
}

// -------------------------------------------------------------------

// S2SServerReportReq

// .SSMsg.ServerReportInfo server_report_info = 1;
inline bool S2SServerReportReq::has_server_report_info() const {
  return this != internal_default_instance() && server_report_info_ != NULL;
}
inline void S2SServerReportReq::clear_server_report_info() {
  if (GetArenaNoVirtual() == NULL && server_report_info_ != NULL) {
    delete server_report_info_;
  }
  server_report_info_ = NULL;
}
inline const ::SSMsg::ServerReportInfo& S2SServerReportReq::_internal_server_report_info() const {
  return *server_report_info_;
}
inline const ::SSMsg::ServerReportInfo& S2SServerReportReq::server_report_info() const {
  const ::SSMsg::ServerReportInfo* p = server_report_info_;
  // @@protoc_insertion_point(field_get:SSMsg.S2SServerReportReq.server_report_info)
  return p != NULL ? *p : *reinterpret_cast<const ::SSMsg::ServerReportInfo*>(
      &::SSMsg::_ServerReportInfo_default_instance_);
}
inline ::SSMsg::ServerReportInfo* S2SServerReportReq::release_server_report_info() {
  // @@protoc_insertion_point(field_release:SSMsg.S2SServerReportReq.server_report_info)
  
  ::SSMsg::ServerReportInfo* temp = server_report_info_;
  server_report_info_ = NULL;
  return temp;
}
inline ::SSMsg::ServerReportInfo* S2SServerReportReq::mutable_server_report_info() {
  
  if (server_report_info_ == NULL) {
    auto* p = CreateMaybeMessage<::SSMsg::ServerReportInfo>(GetArenaNoVirtual());
    server_report_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSMsg.S2SServerReportReq.server_report_info)
  return server_report_info_;
}
inline void S2SServerReportReq::set_allocated_server_report_info(::SSMsg::ServerReportInfo* server_report_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_report_info_;
  }
  if (server_report_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_report_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_report_info, submessage_arena);
    }
    
  } else {
    
  }
  server_report_info_ = server_report_info;
  // @@protoc_insertion_point(field_set_allocated:SSMsg.S2SServerReportReq.server_report_info)
}

// -------------------------------------------------------------------

// S2SHeartBeat

// int32 server_type = 1;
inline void S2SHeartBeat::clear_server_type() {
  server_type_ = 0;
}
inline ::google::protobuf::int32 S2SHeartBeat::server_type() const {
  // @@protoc_insertion_point(field_get:SSMsg.S2SHeartBeat.server_type)
  return server_type_;
}
inline void S2SHeartBeat::set_server_type(::google::protobuf::int32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.S2SHeartBeat.server_type)
}

// int32 server_id = 2;
inline void S2SHeartBeat::clear_server_id() {
  server_id_ = 0;
}
inline ::google::protobuf::int32 S2SHeartBeat::server_id() const {
  // @@protoc_insertion_point(field_get:SSMsg.S2SHeartBeat.server_id)
  return server_id_;
}
inline void S2SHeartBeat::set_server_id(::google::protobuf::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.S2SHeartBeat.server_id)
}

// int32 state = 3;
inline void S2SHeartBeat::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 S2SHeartBeat::state() const {
  // @@protoc_insertion_point(field_get:SSMsg.S2SHeartBeat.state)
  return state_;
}
inline void S2SHeartBeat::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:SSMsg.S2SHeartBeat.state)
}

// -------------------------------------------------------------------

// S2SNewServerAddGroupReq

// repeated .SSMsg.ServerInfo server_info = 1;
inline int S2SNewServerAddGroupReq::server_info_size() const {
  return server_info_.size();
}
inline void S2SNewServerAddGroupReq::clear_server_info() {
  server_info_.Clear();
}
inline ::SSMsg::ServerInfo* S2SNewServerAddGroupReq::mutable_server_info(int index) {
  // @@protoc_insertion_point(field_mutable:SSMsg.S2SNewServerAddGroupReq.server_info)
  return server_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SSMsg::ServerInfo >*
S2SNewServerAddGroupReq::mutable_server_info() {
  // @@protoc_insertion_point(field_mutable_list:SSMsg.S2SNewServerAddGroupReq.server_info)
  return &server_info_;
}
inline const ::SSMsg::ServerInfo& S2SNewServerAddGroupReq::server_info(int index) const {
  // @@protoc_insertion_point(field_get:SSMsg.S2SNewServerAddGroupReq.server_info)
  return server_info_.Get(index);
}
inline ::SSMsg::ServerInfo* S2SNewServerAddGroupReq::add_server_info() {
  // @@protoc_insertion_point(field_add:SSMsg.S2SNewServerAddGroupReq.server_info)
  return server_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSMsg::ServerInfo >&
S2SNewServerAddGroupReq::server_info() const {
  // @@protoc_insertion_point(field_list:SSMsg.S2SNewServerAddGroupReq.server_info)
  return server_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SSMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SSMsg::SS_MSG_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSMsg::SS_MSG_ID>() {
  return ::SSMsg::SS_MSG_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_game_5fss_2eproto
